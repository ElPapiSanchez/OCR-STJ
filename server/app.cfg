SESSION_COOKIE_SAMESITE = "Strict"

######
# Security
######

# No flashing when using flask-security API with React frontend
SECURITY_FLASH_MESSAGES = False

# React frontend is a Single Page Application
SECURITY_REDIRECT_BEHAVIOR = "spa"

# Security params and endpoints
SECURITY_RETURN_GENERIC_RESPONSES = True
SECURITY_URL_PREFIX = '/account'

SECURITY_UNAUTHORIZED_VIEW = '/admin/'
SECURITY_LOGIN_URL = '/login'
SECURITY_POST_LOGIN_VIEW = '/admin/'

SECURITY_LOGOUT_URL = '/logout'
SECURITY_POST_LOGOUT_VIEW = '/admin/'

#SECURITY_REGISTERABLE = True
## SECURITY_SEND_REGISTER_EMAIL = False
#SECURITY_REGISTER_URL = '/register'
#SECURITY_POST_REGISTER = '/admin/'

#SECURITY_CONFIRMABLE = True
#SECURITY_POST_CONFIRM_VIEW = "/confirmed"

#SECURITY_RECOVERABLE = True
#SECURITY_RESET_VIEW = "/reset-password"

SECURITY_TRACKABLE = True

#SECURITY_CHANGEABLE = True
#SECURITY_CHANGE_URL = "/change-password"

# Redirects
#SECURITY_CONFIRM_ERROR_VIEW = "/confirm-error"
#SECURITY_RESET_ERROR_VIEW = "/reset-password-error"
#SECURITY_LOGIN_ERROR_VIEW = "/login-error"

######
# CSRF
######

# enforce CSRF protection for session / browser - but allow token-based
# API calls to go through
SECURITY_CSRF_PROTECT_MECHANISMS = ["session", "basic"]
SECURITY_CSRF_IGNORE_UNAUTH_ENDPOINTS = True

# Send Cookie with csrf-token
SECURITY_CSRF_COOKIE_NAME = "XSRF-TOKEN"
WTF_CSRF_CHECK_DEFAULT = False
WTF_CSRF_TIME_LIMIT = None

######
# Authentication Database
######

# Use in-memory db
SQLALCHEMY_DATABASE_URI = "sqlite:////tmp/test.db"
# Ensure db connections from pool are still valid, since
# idle connections may be closed
SQLALCHEMY_ENGINE_OPTIONS = {
    "pool_pre_ping": True,
}
SQLALCHEMY_TRACK_MODIFICATIONS = False
#SQLALCHEMY_ECHO = True

######
# Mail Service
######
MAIL_BACKEND = 'console'
# MAIL_SERVER =
#MAIL_PORT = 587
#MAIL_USE_TLS = True
